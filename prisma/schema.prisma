// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("CONNECTION_STRING")
}

model User {
  id                      String                      @id @default(cuid())
  localProfile            LocalProfile?               @relation
  googleProfile           GoogleProfile?              @relation
  companies               CompanyEmployee[]
  bookings                BookingCustomer[]
  createdCompanies        Company[]                   @relation("CreatedCompanies")
  receivedCompanyInvites  CompanyEmployeeInvitation[]
  updatedCompaniesHistory CompanyUpdateHistory[]
  createdAt               DateTime                    @default(now()) @db.Timestamptz(6)
  updatedAt               DateTime                    @updatedAt @db.Timestamptz(6)
  deletedAt               DateTime?                   @db.Timestamptz(6)
}

model LocalProfile {
  id                    String  @id @default(cuid())
  givenName             String
  familyName            String
  email                 String  @unique
  isEmailVerified       Boolean @default(false)
  phoneNumberCountryISO String
  phoneNumber           String
  phoneNumberFormatted  String
  isPhoneVerified       Boolean @default(false)
  profileImageUrl       String?
  password              String? /// Not required if the user signed up with a 3rd party provider
  isSystemAdmin         Boolean @default(false)
  user                  User    @relation(fields: [userId], references: [id])
  userId                String  @unique

  @@unique([phoneNumberCountryISO, phoneNumber])
}

model GoogleProfile {
  id           String  @id @default(cuid())
  googleId     String  @unique
  accessToken  String
  refreshToken String?
  responseJson Json /// Google API response with email, name, etc.
  user         User    @relation(fields: [userId], references: [id])
  userId       String  @unique
}

model Company {
  id            String                 @id @default(cuid())
  name          String
  country       String
  county        String
  city          String
  street        String
  postalCode    String
  latitude      Float
  longitude     Float
  employees     CompanyEmployee[]
  resources     Resource[]
  createdAt     DateTime               @default(now()) @db.Timestamptz(6)
  createdById   String
  createdBy     User                   @relation("CreatedCompanies", fields: [createdById], references: [id])
  updateHistory CompanyUpdateHistory[]
  deletedAt     DateTime?              @db.Timestamptz(6)
}

enum CompanyEmployeeRole {
  REGULAR
  MANAGER
  OWNER
}

model CompanyEmployee {
  id                String                      @id @default(cuid())
  companyId         String
  company           Company                     @relation(fields: [companyId], references: [id])
  employeeId        String
  employee          User                        @relation(fields: [employeeId], references: [id])
  role              CompanyEmployeeRole
  assignedResources ResourceEmployee[]
  sentInvitations   CompanyEmployeeInvitation[]

  @@unique([companyId, employeeId])
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  DECLINED
  CANCELLED
  EXPIRED
}

model CompanyEmployeeInvitation {
  id            String              @id @default(cuid())
  senderId      String
  sender        CompanyEmployee     @relation(fields: [senderId], references: [id])
  invitedUserId String
  invitedUser   User                @relation(fields: [invitedUserId], references: [id])
  role          CompanyEmployeeRole
  status        InvitationStatus    @default(PENDING)
  createdAt     DateTime            @default(now()) @db.Timestamptz(6)
  expiresAt     DateTime            @db.Timestamptz(6)

  @@unique([senderId, invitedUserId, status])
}

model CompanyUpdateHistory {
  id            String   @id @default(cuid())
  modifications Json     @db.Json
  companyId     String
  company       Company  @relation(fields: [companyId], references: [id])
  updatedById   String
  updatedBy     User     @relation(fields: [updatedById], references: [id])
  updatedAt     DateTime @default(now()) @db.Timestamptz(6)
}

enum ResourceCategory {
  //ToDo: Add more categories
  SPORT_FIELD
}

model Resource {
  id                      String                 @id @default(cuid())
  name                    String
  description             String
  availabilityTime        ResourceAvailability[]
  category                ResourceCategory
  companyId               String
  company                 Company                @relation(fields: [companyId], references: [id])
  assignedEmployees       ResourceEmployee[]
  services                Service[]
  requiresBookingApproval Boolean                @default(false)
  createdAt               DateTime               @default(now()) @db.Timestamptz(6)
  deletedAt               DateTime?              @db.Timestamptz(6)
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

model ResourceAvailability {
  id         String    @id @default(cuid())
  resourceId String
  resource   Resource  @relation(fields: [resourceId], references: [id])
  dayOfWeek  DayOfWeek
  startTime  String /// "09:00"
  endTime    String /// "18:00"
}

model ResourceEmployee {
  id         String          @id @default(cuid())
  resourceId String
  resource   Resource        @relation(fields: [resourceId], references: [id])
  employeeId String
  employee   CompanyEmployee @relation(fields: [employeeId], references: [id])

  @@unique([resourceId, employeeId])
}

model Service {
  id              String    @id @default(cuid())
  name            String
  description     String
  price           Float
  durationSeconds Int
  resourceId      String
  resource        Resource  @relation(fields: [resourceId], references: [id])
  bookings        Booking[]
  isActive        Boolean   @default(true)
  createdAt       DateTime  @default(now()) @db.Timestamptz(6)
}

enum BookingStatus {
  PENDING
  APPROVED
  CANCELLED
  COMPLETED
}

model Booking {
  id          String            @id @default(cuid())
  serviceId   String
  service     Service           @relation(fields: [serviceId], references: [id])
  customers   BookingCustomer[]
  startTime   DateTime
  endTime     DateTime
  status      BookingStatus     @default(PENDING)
  isCancelled Boolean           @default(false)
  createdAt   DateTime          @default(now()) @db.Timestamptz(6)
}

model BookingCustomer {
  id             String  @id @default(cuid())
  notes          String?
  bookingId      String
  booking        Booking @relation(fields: [bookingId], references: [id])
  customerId     String
  customer       User    @relation(fields: [customerId], references: [id])
  isMainCustomer Boolean /// Indicate if the customer is the one who made the booking

  @@unique([bookingId, customerId])
}
